import React from "react";
import { Link } from "react-router-dom";
import FontIconPicker from "../../../js/FontIconPicker";
import * as iconDefs from "../../helpers/iconDefs";
class Examples extends React.PureComponent {
    constructor() {
        super(...arguments);
        this.state = {
            value1: 57436,
            value2: [],
            value3: 57595,
            value4: [57475, 57476, 57477, 57539, 57662, 57404, 57405, 57408]
        };
        this.handleChange = (key, value) => {
            const newValue = Array.isArray(value) ? [...value] : value;
            this.setState({ [key]: newValue });
        };
        this.renderSVG = svg => (React.createElement("svg", null,
            React.createElement("use", { xlinkHref: `#${svg}` })));
    }
    render() {
        return (React.createElement(React.Fragment, null,
            React.createElement("h2", null, "Examples and Few Use Cases"),
            React.createElement("p", null, "Here you will find plenty of examples and use cases."),
            React.createElement("p", null,
                "You can get the full source code",
                " ",
                React.createElement("a", { href: "https://github.com/fontIconPicker/react-fonticonpicker/blob/master/src/docs/components/pages/Examples.jsx" }, "here"),
                "."),
            React.createElement("ul", { className: "list-group" },
                React.createElement("li", { className: "list-group-item list-group-item-action flex-column align-items-start" },
                    React.createElement("div", { className: "d-flex w-100 justify-content-between" },
                        React.createElement("h5", { className: "mb-1" }, "Append to Body & Single Picker"),
                        React.createElement("small", null,
                            React.createElement("code", null,
                                "isMulti=",
                                "{false}",
                                " appendTo=\"body\""))),
                    React.createElement("p", { className: "mb-1" },
                        "The picker element uses ",
                        React.createElement("code", null, "appendTo=\"body\""),
                        " to append the protal to body. This uses",
                        " ",
                        React.createElement("code", null, "React.createPortal"),
                        " to append the dropdown to another element."),
                    React.createElement(FontIconPicker, { icons: iconDefs.icomoonIcons, search: iconDefs.icomoonIconsSearch, onChange: value => this.handleChange("value1", value), appendTo: "body", value: this.state.value1, isMulti: false, theme: "bluegrey", renderUsing: "data-icomoon" }),
                    React.createElement("p", null,
                        React.createElement("small", null,
                            "Current value:",
                            " ",
                            React.createElement("span", { className: "badge badge-light" },
                                React.createElement("i", { "data-icomoon": String.fromCodePoint(this.state.value1) }))))),
                React.createElement("li", { className: "list-group-item list-group-item-action flex-column align-items-start" },
                    React.createElement("div", { className: "d-flex w-100 justify-content-between" },
                        React.createElement("h5", { className: "mb-1" }, "Append to Body & Multi Picker"),
                        React.createElement("small", { className: "text-muted" },
                            React.createElement("code", null,
                                "isMulti=",
                                "{true}",
                                " appendTo=\"body\""))),
                    React.createElement("p", { className: "mb-1" },
                        "The component uses ",
                        React.createElement("code", null, "isMulti"),
                        " (default) to pick multiple values."),
                    React.createElement(FontIconPicker, { icons: iconDefs.icomoonIcons, search: iconDefs.icomoonIconsSearch, onChange: value => this.handleChange("value2", value), appendTo: "body", value: this.state.value2, isMulti: true, theme: "bluegrey", renderUsing: "data-icomoon" }),
                    React.createElement("p", null,
                        React.createElement("small", { className: "text-muted" },
                            "Current values:",
                            " ",
                            this.state.value2.map(value => (React.createElement("span", { className: "badge badge-light", key: value },
                                React.createElement("i", { "data-icomoon": String.fromCodePoint(value) }))))))),
                React.createElement("li", { className: "list-group-item list-group-item-action flex-column align-items-start" },
                    React.createElement("div", { className: "d-flex w-100 justify-content-between" },
                        React.createElement("h5", { className: "mb-1" }, "Append to Self & Single Picker"),
                        React.createElement("small", { className: "text-muted" },
                            React.createElement("code", null,
                                "isMulti=",
                                "{false}",
                                " appendTo=\"self\""))),
                    React.createElement("p", { className: "mb-1" },
                        "The element uses",
                        " ",
                        React.createElement("code", null,
                            "appendTo=\"self\" isMulti=",
                            "{false}"),
                        " to append to the current div instead of somewhere else."),
                    React.createElement(FontIconPicker, { icons: iconDefs.icomoonIcons, search: iconDefs.icomoonIconsSearch, value: this.state.value3, onChange: value => this.handleChange("value3", value), isMulti: false, renderUsing: "data-icomoon" }),
                    React.createElement("p", null,
                        React.createElement("small", { className: "text-muted" },
                            "Current value:",
                            " ",
                            React.createElement("span", { className: "badge badge-light" },
                                React.createElement("i", { "data-icomoon": String.fromCodePoint(this.state.value3) }))))),
                React.createElement("li", { className: "list-group-item list-group-item-action flex-column align-items-start" },
                    React.createElement("div", { className: "d-flex w-100 justify-content-between" },
                        React.createElement("h5", { className: "mb-1" }, "Append to Self & Multi Picker"),
                        React.createElement("small", { className: "text-muted" },
                            React.createElement("code", null,
                                "isMulti=",
                                "{true}",
                                " appendTo=\"self\""))),
                    React.createElement("p", { className: "mb-1" },
                        "The element uses",
                        " ",
                        React.createElement("code", null,
                            "appendTo=\"self\" isMulti=",
                            "{true}"),
                        " to pick multiple icons."),
                    React.createElement(FontIconPicker, { icons: iconDefs.icomoonIcons, search: iconDefs.icomoonIconsSearch, value: this.state.value4, onChange: value => this.handleChange("value4", value), isMulti: true, renderUsing: "data-icomoon" }),
                    React.createElement("p", null,
                        React.createElement("small", { className: "text-muted" },
                            "Current value",
                            React.createElement("strong", null, "s"),
                            ":",
                            " ",
                            this.state.value4.map(value => (React.createElement("span", { className: "badge badge-light", key: value },
                                React.createElement("i", { "data-icomoon": String.fromCodePoint(value) }))))))),
                React.createElement("li", { className: "list-group-item list-group-item-action flex-column align-items-start" },
                    React.createElement("div", { className: "d-flex w-100 justify-content-between" },
                        React.createElement("h5", { className: "mb-1" }, "Implied Search"),
                        React.createElement("small", { className: "text-muted" },
                            React.createElement("code", null,
                                "search=",
                                "{null}"))),
                    React.createElement("p", { className: "mb-1" },
                        "When ",
                        React.createElement("code", null, "search"),
                        " is null, the value of ",
                        React.createElement("code", null, "icons"),
                        " ",
                        "are used."),
                    React.createElement(FontIconPicker, { icons: iconDefs.fontelloIcons, value: ["icon-th", "icon-video"], onChange: val => val, renderUsing: "class", isMulti: true }),
                    React.createElement("small", { className: "text-muted" },
                        "try searching for ",
                        React.createElement("em", null, "video"),
                        ".")),
                React.createElement("li", { className: "list-group-item list-group-item-action flex-column align-items-start" },
                    React.createElement("div", { className: "d-flex w-100 justify-content-between" },
                        React.createElement("h5", { className: "mb-1" }, "SVG with Custom Rendered"),
                        React.createElement("small", { className: "text-muted" },
                            React.createElement("code", null,
                                "renderFunc=",
                                "{renderSVG}"))),
                    React.createElement("p", { className: "mb-1" }, "A custom renderer function is used to render SVG. The function takes the value as argument, and should return a react element or JSX."),
                    React.createElement(FontIconPicker, { icons: iconDefs.svgs, value: ["004-green_lantern", "066-daredevil_glasses"], onChange: val => val, renderFunc: this.renderSVG, theme: "indigo", isMulti: true }),
                    React.createElement(Link, { href: "/basic-usage/fip-custom-rendering/", to: "/basic-usage/fip-custom-rendering/", className: "btn btn-light" }, "See Code")),
                React.createElement("li", { className: "list-group-item list-group-item-action flex-column align-items-start" },
                    React.createElement("div", { className: "d-flex w-100 justify-content-between" },
                        React.createElement("h5", { className: "mb-1" }, "Do not show Category"),
                        React.createElement("small", { className: "text-muted" },
                            React.createElement("code", null,
                                "showCategory=",
                                "{false}"))),
                    React.createElement("p", { className: "mb-1" },
                        "When ",
                        React.createElement("code", null,
                            "showCategory=",
                            "{false}"),
                        ", even categorized source is flattened."),
                    React.createElement(FontIconPicker, { icons: iconDefs.fontAwesome, value: [], onChange: val => val, showCategory: false, theme: "purple", isMulti: true })),
                React.createElement("li", { className: "list-group-item list-group-item-action flex-column align-items-start" },
                    React.createElement("div", { className: "d-flex w-100 justify-content-between" },
                        React.createElement("h5", { className: "mb-1" }, "Do not show Search"),
                        React.createElement("small", { className: "text-muted" },
                            React.createElement("code", null,
                                "showSearch=",
                                "{false}"))),
                    React.createElement("p", { className: "mb-1" },
                        "With ",
                        React.createElement("code", null,
                            "showSearch=",
                            "{false}"),
                        " the search input is not displayed."),
                    React.createElement(FontIconPicker, { icons: iconDefs.fontAwesome, value: [], onChange: val => val, showSearch: false, theme: "purple", isMulti: true })),
                React.createElement("li", { className: "list-group-item list-group-item-action flex-column align-items-start" },
                    React.createElement("div", { className: "d-flex w-100 justify-content-between" },
                        React.createElement("h5", { className: "mb-1" }, "Autoclose on Select"),
                        React.createElement("small", { className: "text-muted" },
                            React.createElement("code", null,
                                "closeOnSelect=",
                                "{true}"))),
                    React.createElement("p", { className: "mb-1" },
                        "With ",
                        React.createElement("code", null,
                            "closeOnSelect=",
                            "{true}"),
                        " the modal is closed on icon select."),
                    React.createElement(FontIconPicker, { icons: iconDefs.fontAwesome, value: [], onChange: val => val, showSearch: false, theme: "purple", isMulti: false, closeOnSelect: true })))));
    }
}
export default Examples;
//# sourceMappingURL=Examples.js.map